
import React, { useState } from 'react';
import { Button } from "@/components/ui/button";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Download, Loader2 } from "lucide-react";

export default function ReportControls({ selectedPeriod, onPeriodChange, reportData }) {
  const [isGeneratingPDF, setIsGeneratingPDF] = useState(false);

  const periods = [
    { value: "this-month", label: "This Month" },
    { value: "last-month", label: "Last Month" },
    { value: "this-week", label: "This Week" },
  ];

  const generatePDF = async () => {
    setIsGeneratingPDF(true);
    
    try {
      // Create PDF content
      const pdfContent = `
        FinMate Financial Report
        Period: ${reportData?.periodLabel || selectedPeriod}
        Generated: ${new Date().toLocaleDateString()}
        
        FINANCIAL SUMMARY
        ================
        Total Income: $${reportData?.income?.toFixed(2) || '0.00'}
        Total Expenses: $${reportData?.expenses?.toFixed(2) || '0.00'}
        Net Savings: $${reportData?.netSavings?.toFixed(2) || '0.00'}
        
        SPENDING BY CATEGORY
        ===================
        ${Object.entries(reportData?.spendingByCategory || {})
          .map(([category, amount]) => `${category.charAt(0).toUpperCase() + category.slice(1)}: $${amount.toFixed(2)}`)
          .join('\n')}
        
        RECENT TRANSACTIONS
        ==================
        ${reportData?.transactions?.slice(0, 10).map(t => 
          `${new Date(t.date).toLocaleDateString()} - ${t.description} - $${t.amount.toFixed(2)} (${t.category})`
        ).join('\n') || 'No transactions found'}
        
        Generated by FinMate - Your AI Financial Assistant
      `;

      // Create and download the file
      const blob = new Blob([pdfContent], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = `finmate-report-${selectedPeriod}-${new Date().toISOString().split('T')[0]}.txt`;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);
      
    } catch (error) {
      console.error("Error generating report:", error);
    } finally {
      setIsGeneratingPDF(false);
    }
  };

  return (
    <div className="flex items-center gap-3">
      <Select value={selectedPeriod} onValueChange={onPeriodChange}>
        <SelectTrigger className="w-40 bg-gray-800/50 border-gray-700/50 text-white">
          <SelectValue />
        </SelectTrigger>
        <SelectContent className="bg-gray-800 border-gray-700">
          {periods.map((period) => (
            <SelectItem key={period.value} value={period.value} className="text-white hover:bg-gray-700">
              {period.label}
            </SelectItem>
          ))}
        </SelectContent>
      </Select>
      <Button
        variant="outline"
        onClick={generatePDF}
        disabled={isGeneratingPDF}
        className="border-emerald-500/30 text-emerald-400 bg-emerald-500/10 hover:bg-emerald-500/20"
      >
        {isGeneratingPDF ? (
          <>
            <Loader2 className="w-4 h-4 mr-2 animate-spin" />
            Generating...
          </>
        ) : (
          <>
            <Download className="w-4 h-4 mr-2" />
            Download Report
          </>
        )}
      </Button>
    </div>
  );
}
